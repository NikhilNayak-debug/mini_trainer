[tox]
requires = 
    tox>=4
    tox-uv
env_list = py311, py312

[testenv]
# Use uv for package installation and management
runner = uv-venv-runner
uv_seed = true
deps = 
    pytest
    pytest-cov
    ruff
commands = pytest {posargs}

[testenv:test]
description = Run tests
commands = pytest {posargs}

[testenv:test-verbose]
description = Run tests with verbose output
commands = pytest -v {posargs}

[testenv:test-quick]
description = Run tests until first failure
commands = pytest -x {posargs}

[testenv:test-coverage]
description = Run tests with coverage
commands = pytest --cov=mini_trainer --cov-report=html --cov-report=term {posargs}

[testenv:lint]
description = Run linting with ruff
commands = ruff check .

[testenv:lint-fix]
description = Run linting with ruff and fix issues
commands = ruff check --fix .

[testenv:format]
description = Format code with ruff
commands = ruff format .

[testenv:format-check]
description = Check code formatting with ruff
commands = ruff format --check .

[testenv:py311]
description = Run tests on Python 3.11
base_python = python3.11

[testenv:py312]
description = Run tests on Python 3.12
base_python = python3.12

[testenv:gpu-tests]
description = Run all GPU tests (requires CUDA, flash-attn optional)
base_python = python3.12
deps = 
    pytest
    pytest-cov
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
    NCCL_DEBUG
commands = pytest tests/gpu_tests -v {posargs}

[testenv:gpu]
description = Run GPU tests marked with @pytest.mark.gpu
base_python = python3.12
deps = 
    pytest
    pytest-cov
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests -v -m gpu {posargs}

[testenv:gpu-overfitting]
description = Run overfitting tests to diagnose training accuracy issues
base_python = python3.12
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests/test_overfitting.py -v -s {posargs}

[testenv:gpu-single]
description = Run single GPU training tests
base_python = python3.12
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests/test_single_gpu_training.py -v -s {posargs}

[testenv:gpu-multi]
description = Run multi-GPU distributed training tests (requires 2+ GPUs)
base_python = python3.12
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
    NCCL_DEBUG
setenv = 
    CUDA_VISIBLE_DEVICES = 0,1
commands = pytest tests/gpu_tests/test_multi_gpu_training.py -v -s -m multigpu {posargs}

# Python 3.11 versions of GPU tests
[testenv:gpu-tests-py311]
description = Run all GPU tests on Python 3.11
base_python = python3.11
deps = 
    pytest
    pytest-cov
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
    NCCL_DEBUG
commands = pytest tests/gpu_tests -v {posargs}

[testenv:gpu-py311]
description = Run GPU tests marked with @pytest.mark.gpu on Python 3.11
base_python = python3.11
deps = 
    pytest
    pytest-cov
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests -v -m gpu {posargs}

[testenv:gpu-overfitting-py311]
description = Run overfitting tests on Python 3.11
base_python = python3.11
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests/test_overfitting.py -v -s {posargs}

[testenv:gpu-single-py311]
description = Run single GPU training tests on Python 3.11
base_python = python3.11
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests/test_single_gpu_training.py -v -s {posargs}

[testenv:gpu-multi-py311]
description = Run multi-GPU distributed training tests on Python 3.11
base_python = python3.11
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
    NCCL_DEBUG
setenv = 
    CUDA_VISIBLE_DEVICES = 0,1
commands = pytest tests/gpu_tests/test_multi_gpu_training.py -v -s -m multigpu {posargs}

# Python 3.12 versions of GPU tests (explicit)
[testenv:gpu-tests-py312]
description = Run all GPU tests on Python 3.12
base_python = python3.12
deps = 
    pytest
    pytest-cov
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
    NCCL_DEBUG
commands = pytest tests/gpu_tests -v {posargs}

[testenv:gpu-py312]
description = Run GPU tests marked with @pytest.mark.gpu on Python 3.12
base_python = python3.12
deps = 
    pytest
    pytest-cov
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests -v -m gpu {posargs}

[testenv:gpu-overfitting-py312]
description = Run overfitting tests on Python 3.12
base_python = python3.12
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests/test_overfitting.py -v -s {posargs}

[testenv:gpu-single-py312]
description = Run single GPU training tests on Python 3.12
base_python = python3.12
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
commands = pytest tests/gpu_tests/test_single_gpu_training.py -v -s {posargs}

[testenv:gpu-multi-py312]
description = Run multi-GPU distributed training tests on Python 3.12
base_python = python3.12
deps = 
    pytest
passenv = 
    CUDA_VISIBLE_DEVICES
    CUDA_HOME
    LD_LIBRARY_PATH
    NCCL_DEBUG
setenv = 
    CUDA_VISIBLE_DEVICES = 0,1
commands = pytest tests/gpu_tests/test_multi_gpu_training.py -v -s -m multigpu {posargs}
